#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 72 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 44 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 46 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1           0 1065 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 214
(
 #"#reader(lib \"htdp-beginner-reader.ss\" \"lang\")((modname |lorenzMN"
 #"euman - modified|) (read-case-sensitive #t) (teachpacks ((lib \"imag"
 #"e.rkt\" \"teachpack\" \"2htdp\") (lib \"universe.rkt\" \"teachpack\""
 #" \"2htdp\") (lib \"abstract"
) 0 0 4 3 386
(
 #"ion.rkt\" \"teachpack\" \"2htdp\") (lib \"batch-io.rkt\" \"teachpack"
 #"\" \"2htdp\") (lib \"itunes.rkt\" \"teachpack\" \"2htdp\"))) (htdp-s"
 #"ettings #(#t constructor repeating-decimal #f #t none #f ((lib \"ima"
 #"ge.rkt\" \"teachpack\" \"2htdp\") ("
 #"lib \"universe.rkt\" \"teachpack\" \"2htdp\") (lib \"abstraction.rkt"
 #"\" \"teachpack\" \"2htdp\") (lib \"batch-io.rkt\" \"teachpack\" \"2h"
 #"tdp\") (lib \"itunes.rkt\" \"teachpack\" \"2htdp\")) #f)))"
) 0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 1 #" "
0 0 21 3 3 #"8/3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"rho"
0 0 24 3 1 #" "
0 0 21 3 2 #"28"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"time-step"
0 0 24 3 1 #" "
0 0 21 3 6 #"#i0.01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Number Number Number -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; Computes the next x coordinate given the x, y, and z coordinates."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Strategy: domain knowledge"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"next-x"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 9 #"time-step"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 5 #"sigma"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Number Number Number -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; Computes the next y coordinate given the x, y, and z coordinates."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Strategy: domain knowledge"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"next-y"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 9 #"time-step"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"rho"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 3 #")) "
0 0 14 3 1 #"y"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #"; Number Number Number -> Number"
0 0 24 29 1 #"\n"
0 0 17 3 67
#"; Computes the next z coordinate given the x, y, and z coordinates."
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; Strategy: domain knowledge"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"next-z"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 9 #"time-step"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 3 #") ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 4 #"beta"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 24 3 2 #" ("
0 0 14 3 6 #"next-x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 24 3 2 #" ("
0 0 14 3 6 #"next-y"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 4 #"1.26"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 24 3 2 #" ("
0 0 14 3 6 #"next-z"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 4 #"0.98"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";; Creates empty scene"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"EMPTY"
0 0 24 3 9 #"        ("
0 0 14 3 11 #"empty-scene"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 1 #" "
0 0 21 3 3 #"600"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";; Interpretation: the point (x, y, z)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"3posn"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #" "
0 0 14 3 1 #"z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Template"
0 0 17 3 1 #" "
0 0 17 3 9 #"for 3posn"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"process-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"..."
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-z"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 2 #") "
0 0 14 3 3 #"..."
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 3 #";; "
0 0 17 3 7 #"Creates"
0 0 17 3 1 #" "
0 0 17 3 8 #"starting"
0 0 17 3 1 #" "
0 0 17 3 5 #"point"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 14 #"Lorenz machine"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #" ("
0 0 14 3 10 #"make-3posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; Next3Posn: 3Posn -> 3Posn"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";; Takes in a 3posn and returns the next 3posn"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";; Example:"
0 0 24 29 1 #"\n"
0 0 17 3 61
#";; - Going from (1 1 1), new 3posn should be at (1 1.26 0.98)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";; Strategy: Function composition"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"make-3posn"
0 0 24 3 2 #" ("
0 0 14 3 6 #"next-x"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #") ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #") ("
0 0 14 3 7 #"3posn-z"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"next-y"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #") ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #") ("
0 0 14 3 7 #"3posn-z"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 6 #"next-z"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #") ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #") ("
0 0 14 3 7 #"3posn-z"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-within"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"make-3posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 10 #"make-3posn"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 4 #"1.26"
0 0 24 3 1 #" "
0 0 21 3 4 #"0.98"
0 0 24 3 2 #") "
0 0 21 3 4 #"0.01"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; DrawImage: 3Posn -> Scene"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #";; Draws a given 3posn and the next three 3posns and lines are conne"
 #"cting them."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";; Examples:"
0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";; - Given point (1, 1, 1) should graph first four points and lines "
 #"connecting them"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";; - Given point (1, 1.26, 0.98) should graph four points and lines "
 #"connecting them"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";; Strategy : Function composition"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"drawImage"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"place-images"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 6 #"circle"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"black\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-posn"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #")) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #")) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"make-posn"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"line1to2"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"drawImage"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #") "
0 6           4 4 2417
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 600 0) #(struct:p"
 #"oint 600 600) #(struct:point 0 600)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 308 308 #(struct:translate 2 2 #(struct:"
 #"ellipse 4 4 0 255 \"black\"))) #(struct:translate 0 0 #(struct:crop "
 #"(#(struct:point 0 0) #(struct:point 600 0) #(struct:point 600 600) #"
 #"(struct:point 0 600)) #(struct:translate 0 0 #(struct:overlay #(stru"
 #"ct:translate 308 310.6 #(struct:translate 2 2 #(struct:ellipse 4 4 0"
 #" 255 \"black\"))) #(struct:translate 0 0 #(struct:crop (#(struct:poi"
 #"nt 0 0) #(struct:point 600 0) #(struct:point 600 600) #(struct:point"
 #" 0 600)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"308.26 313.17566666666664 #(struct:translate 2 2 #(struct:ellipse 4 "
 #"4 0 255 \"black\"))) #(struct:translate 0 0 #(struct:crop (#(struct:"
 #"point 0 0) #(struct:point 600 0) #(struct:point 600 600) #(struct:po"
 #"int 0 600)) #(struct:translate 0 0 #(struct:overlay #(struct:transla"
 #"te 308.7515666666667 315.79721764 #(struct:translate 2 2 #(struct:el"
 #"lipse 4 4 0 255 \"black\"))) #(struct:translate 0 0 #(struct:overlay"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 600 0) #(struct:p"
 #"oint 600 600) #(struct:point 0 600)) #(struct:line-segment #(struct:"
 #"point 310 310) #(struct:point 310 312.6) \"blue\")) #(struct:overlay"
 #" #(struct:crop (#(struct:point 0 0) #(struct:point 600 0) #(struct:p"
 #"oint 600 600) #(struct:point 0 600)) #(struct:line-segment #(struct:"
 #"point 310 312.6) #(struct:point 310.26 315.17566666666664) \"blue\")"
 #") #(struct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point"
 #" 600 0) #(struct:point 600 600) #(struct:point 0 600)) #(struct:line"
 #"-segment #(struct:point 310.26 315.17566666666664) #(struct:point 31"
 #"0.7515666666667 317.79721764) \"blue\")) #(struct:crop (#(struct:poi"
 #"nt 0 0) #(struct:point 600 0) #(struct:point 600 600) #(struct:point"
 #" 0 600)) #(struct:translate 0 0 #(struct:overlay #(struct:translate "
 #"0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0"
 #" 0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 600 600 0 0) #(struct:pulled-point 0 0 0 600 0 0)) outline #("
 #"struct:pen \"black\" 2 solid round round)))) #(struct:translate 0 0 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulled-point 0"
 #" 0 600 600 0 0) #(struct:pulled-point 0 0 0 600 0 0)) 255 \"white\")"
 #")))))))))))))))))))))))) #(struct:bb 600 600 600.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 9 #"drawImage"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 3 #")) "
0 6           4 4 2486
(
 #"(#(struct:crop (#(struct:point 0 0) #(struct:point 600 0) #(struct:p"
 #"oint 600 600) #(struct:point 0 600)) #(struct:translate 0 0 #(struct"
 #":overlay #(struct:translate 308 310.6 #(struct:translate 2 2 #(struc"
 #"t:ellipse 4 4 0 255 \"black\"))) #(struct:translate 0 0 #(struct:cro"
 #"p (#(struct:point 0 0) #(struct:point 600 0) #(struct:point 600 600)"
 #" #(struct:point 0 600)) #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:translate 308.26 313.17566666666664 #(struct:translate 2 2 #(st"
 #"ruct:ellipse 4 4 0 255 \"black\"))) #(struct:translate 0 0 #(struct:"
 #"crop (#(struct:point 0 0) #(struct:point 600 0) #(struct:point 600 6"
 #"00) #(struct:point 0 600)) #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:translate 308.7515666666667 315.79721764 #(struct:translate "
 #"2 2 #(struct:ellipse 4 4 0 255 \"black\"))) #(struct:translate 0 0 #"
 #"(struct:crop (#(struct:point 0 0) #(struct:point 600 0) #(struct:poi"
 #"nt 600 600) #(struct:point 0 600)) #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 309.456131764 318.5265311932351 #(struct:t"
 #"ranslate 2 2 #(struct:ellipse 4 4 0 255 \"black\"))) #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:crop (#(struct:point 0 0) #(struct"
 #":point 600 0) #(struct:point 600 600) #(struct:point 0 600)) #(struc"
 #"t:line-segment #(struct:point 310 312.6) #(struct:point 310.26 315.1"
 #"7566666666664) \"blue\")) #(struct:overlay #(struct:crop (#(struct:p"
 #"oint 0 0) #(struct:point 600 0) #(struct:point 600 600) #(struct:poi"
 #"nt 0 600)) #(struct:line-segment #(struct:point 310.26 315.175666666"
 #"66664) #(struct:point 310.7515666666667 317.79721764) \"blue\")) #(s"
 #"truct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point 600 "
 #"0) #(struct:point 600 600) #(struct:point 0 600)) #(struct:line-segm"
 #"ent #(struct:point 310.7515666666667 317.79721764) #(struct:point 31"
 #"1.456131764 320.5265311932351) \"blue\")) #(struct:crop (#(struct:po"
 #"int 0 0) #(struct:point 600 0) #(struct:point 600 600) #(struct:poin"
 #"t 0 600)) #(struct:translate 0 0 #(struct:overlay #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulled-po"
 #"int 0 0 600 600 0 0) #(struct:pulled-point 0 0 0 600 0 0)) outline #"
 #"(struct:pen \"black\" 2 solid round round)))) #(struct:translate 0 0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulled-point "
 #"0 0 600 600 0 0) #(struct:pulled-point 0 0 0 600 0 0)) 255 \"white\""
 #"))))))))))))))))))))))))) #(struct:bb 600 600 600.0) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; line1to2 : 3posn -> scene"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";; draws all three lines"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";; Examples: given (1, 1, 1) should draw lines between where the fou"
 #"r 3posns would be"
) 0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #";; (1, 1.26, 0.98) should draw lines between where the four 3posns w"
 #"ould be"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; Strategy : Domain Knowledge"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line1to2"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"scene+line"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line2to3"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 2 #") "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #")) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #")) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 6 #"\"blue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line1to2"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #") "
0 6           4 4 1336
(
 #"(#(struct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"600 0) #(struct:point 600 600) #(struct:point 0 600)) #(struct:line-"
 #"segment #(struct:point 310 310) #(struct:point 310 312.6) \"blue\"))"
 #" #(struct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"600 0) #(struct:point 600 600) #(struct:point 0 600)) #(struct:line-"
 #"segment #(struct:point 310 312.6) #(struct:point 310.26 315.17566666"
 #"666664) \"blue\")) #(struct:overlay #(struct:crop (#(struct:point 0 "
 #"0) #(struct:point 600 0) #(struct:point 600 600) #(struct:point 0 60"
 #"0)) #(struct:line-segment #(struct:point 310.26 315.17566666666664) "
 #"#(struct:point 310.7515666666667 317.79721764) \"blue\")) #(struct:c"
 #"rop (#(struct:point 0 0) #(struct:point 600 0) #(struct:point 600 60"
 #"0) #(struct:point 0 600)) #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #("
 #"struct:pulled-point 0 0 600 600 0 0) #(struct:pulled-point 0 0 0 600"
 #" 0 0)) outline #(struct:pen \"black\" 2 solid round round)))) #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(stru"
 #"ct:pulled-point 0 0 600 600 0 0) #(struct:pulled-point 0 0 0 600 0 0"
 #")) 255 \"white\"))))))))) #(struct:bb 600 600 600) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line1to2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 3 #")) "
0 6           4 17 1381
(
 #"(#(struct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"600 0) #(struct:point 600 600) #(struct:point 0 600)) #(struct:line-"
 #"segment #(struct:point 310 312.6) #(struct:point 310.26 315.17566666"
 #"666664) \"blue\")) #(struct:overlay #(struct:crop (#(struct:point 0 "
 #"0) #(struct:point 600 0) #(struct:point 600 600) #(struct:point 0 60"
 #"0)) #(struct:line-segment #(struct:point 310.26 315.17566666666664) "
 #"#(struct:point 310.7515666666667 317.79721764) \"blue\")) #(struct:o"
 #"verlay #(struct:crop (#(struct:point 0 0) #(struct:point 600 0) #(st"
 #"ruct:point 600 600) #(struct:point 0 600)) #(struct:line-segment #(s"
 #"truct:point 310.7515666666667 317.79721764) #(struct:point 311.45613"
 #"1764 320.5265311932351) \"blue\")) #(struct:crop (#(struct:point 0 0"
 #") #(struct:point 600 0) #(struct:point 600 600) #(struct:point 0 600"
 #")) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #("
 #"struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0"
 #" 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulled-point 0 0"
 #" 600 600 0 0) #(struct:pulled-point 0 0 0 600 0 0)) outline #(struct"
 #":pen \"black\" 2 solid round round)))) #(struct:translate 0 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulled-point 0 0 600"
 #" 600 0 0) #(struct:pulled-point 0 0 0 600 0 0)) 255 \"white\")))))))"
 #")) #(struct:bb 600 600 600) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; line2to3 : 3posn -> scene"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";; draws two lines"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";; Examples: given (1, 1, 1) should draw lines between where the thr"
 #"ee 3posns would be"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";; (1, 1.26, 0.98) should draw lines between where the three 3posns "
 #"would be"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; Strategy : Domain Knowledge"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line2to3"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"scene+line"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line3to4"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #")) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 3 #")) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 6 #"\"blue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line2to3"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #")"
0 6           4 17 1133
(
 #"(#(struct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"600 0) #(struct:point 600 600) #(struct:point 0 600)) #(struct:line-"
 #"segment #(struct:point 310 312.6) #(struct:point 310.26 315.17566666"
 #"666664) \"blue\")) #(struct:overlay #(struct:crop (#(struct:point 0 "
 #"0) #(struct:point 600 0) #(struct:point 600 600) #(struct:point 0 60"
 #"0)) #(struct:line-segment #(struct:point 310.26 315.17566666666664) "
 #"#(struct:point 310.7515666666667 317.79721764) \"blue\")) #(struct:c"
 #"rop (#(struct:point 0 0) #(struct:point 600 0) #(struct:point 600 60"
 #"0) #(struct:point 0 600)) #(struct:translate 0 0 #(struct:overlay #("
 #"struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(stru"
 #"ct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #("
 #"struct:pulled-point 0 0 600 600 0 0) #(struct:pulled-point 0 0 0 600"
 #" 0 0)) outline #(struct:pen \"black\" 2 solid round round)))) #(stru"
 #"ct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:p"
 #"ulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(stru"
 #"ct:pulled-point 0 0 600 600 0 0) #(struct:pulled-point 0 0 0 600 0 0"
 #")) 255 \"white\")))))))) #(struct:bb 600 600 600) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line2to3"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 3 #")) "
0 6           4 4 1160
(
 #"(#(struct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"600 0) #(struct:point 600 600) #(struct:point 0 600)) #(struct:line-"
 #"segment #(struct:point 310.26 315.17566666666664) #(struct:point 310"
 #".7515666666667 317.79721764) \"blue\")) #(struct:overlay #(struct:cr"
 #"op (#(struct:point 0 0) #(struct:point 600 0) #(struct:point 600 600"
 #") #(struct:point 0 600)) #(struct:line-segment #(struct:point 310.75"
 #"15666666667 317.79721764) #(struct:point 311.456131764 320.526531193"
 #"2351) \"blue\")) #(struct:crop (#(struct:point 0 0) #(struct:point 6"
 #"00 0) #(struct:point 600 600) #(struct:point 0 600)) #(struct:transl"
 #"ate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:translate 0"
 #" 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pul"
 #"led-point 0 0 600 0 0 0) #(struct:pulled-point 0 0 600 600 0 0) #(st"
 #"ruct:pulled-point 0 0 0 600 0 0)) outline #(struct:pen \"black\" 2 s"
 #"olid round round)))) #(struct:translate 0 0 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 600 0 0 0) #(struct:pulled-point 0 0 600 600 0 0) #(struct"
 #":pulled-point 0 0 0 600 0 0)) 255 \"white\")))))))) #(struct:bb 600 "
 #"600 600) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";; line2to3 : 3posn -> scene"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";; draws one line"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";; Examples: given (1, 1, 1) should draw lines between where the two"
 #" 3posns would be"
) 0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";; (1, 1.26, 0.98) should draw lines between where the two 3posns wo"
 #"uld be"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";; Strategy : Domain Knowledge"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line3to4"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"scene+line"
0 0 24 3 1 #" "
0 0 14 3 5 #"EMPTY"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 4 #"))) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-x"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"3posn-y"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #"("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 7 #"a-3posn"
0 0 24 3 5 #")))) "
0 0 21 3 2 #"10"
0 0 24 3 2 #") "
0 0 21 3 3 #"300"
0 0 24 3 13 #")            "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 6 #"\"blue\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line3to4"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 2 #") "
0 6           4 4 912
(
 #"(#(struct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"600 0) #(struct:point 600 600) #(struct:point 0 600)) #(struct:line-"
 #"segment #(struct:point 310.26 315.17566666666664) #(struct:point 310"
 #".7515666666667 317.79721764) \"blue\")) #(struct:crop (#(struct:poin"
 #"t 0 0) #(struct:point 600 0) #(struct:point 600 600) #(struct:point "
 #"0 600)) #(struct:translate 0 0 #(struct:overlay #(struct:translate 0"
 #" 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 "
 #"0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulled-poin"
 #"t 0 0 600 600 0 0) #(struct:pulled-point 0 0 0 600 0 0)) outline #(s"
 #"truct:pen \"black\" 2 solid round round)))) #(struct:translate 0 0 #"
 #"(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 "
 #"0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulled-point 0 "
 #"0 600 600 0 0) #(struct:pulled-point 0 0 0 600 0 0)) 255 \"white\"))"
 #"))))) #(struct:bb 600 600 600) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 24 3 2 #" ("
0 0 14 3 8 #"line3to4"
0 0 24 3 2 #" ("
0 0 14 3 10 #"next-3posn"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 3 #")) "
0 6           4 4 918
(
 #"(#(struct:overlay #(struct:crop (#(struct:point 0 0) #(struct:point "
 #"600 0) #(struct:point 600 600) #(struct:point 0 600)) #(struct:line-"
 #"segment #(struct:point 310.7515666666667 317.79721764) #(struct:poin"
 #"t 311.456131764 320.5265311932351) \"blue\")) #(struct:crop (#(struc"
 #"t:point 0 0) #(struct:point 600 0) #(struct:point 600 600) #(struct:"
 #"point 0 600)) #(struct:translate 0 0 #(struct:overlay #(struct:trans"
 #"late 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-po"
 #"int 0 0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulle"
 #"d-point 0 0 600 600 0 0) #(struct:pulled-point 0 0 0 600 0 0)) outli"
 #"ne #(struct:pen \"black\" 2 solid round round)))) #(struct:translate"
 #" 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 600 0 0 0) #(struct:pulled-po"
 #"int 0 0 600 600 0 0) #(struct:pulled-point 0 0 0 600 0 0)) 255 \"whi"
 #"te\"))))))) #(struct:bb 600 600 600) #f)"
) 0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"big-bang"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"on-draw"
0 0 24 3 1 #" "
0 0 14 3 9 #"drawImage"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"on-tick"
0 0 24 3 1 #" "
0 0 14 3 10 #"next-3posn"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0           0
